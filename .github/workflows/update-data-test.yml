# Periodically checks the nuget.org V3 top packages in search.
# Inspired by https://simonwillison.net/2020/Oct/9/git-scraping/

name: Update data (test)

on:
  workflow_dispatch:

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Check data
      run: |-
        results=$(curl --silent --show-error --fail --retry 5 --retry-connrefused https://api.nuget.org/v3/index.json)
        search=$(echo "$results" | jq '[.resources[] | select(."@type" == "SearchQueryService/3.0.0-beta")][0]."@id"' -r)

        results=$(curl --silent --show-error --fail --retry 5 --retry-connrefused "${search}foo?prerelease=true&semVerLevel=2.0.0&take=100")
        echo "$results" | jq . > top-100.json
        cat top-100.json | jq '.data[] | .id' -r > top-100-id.txt
        cat top-100.json | jq '[.data[] | .id]' > top-100-id.json
        cat top-100.json | jq '[.data[] | {id: .id, version: .version}]' > top-100-id-version.json
        cat top-100.json | jq '[.data[] | {id: .id, version: .version, totalDownloads: .totalDownloads}]' > top-100-id-version-totalDownloads.json

        mkdir -p dotnettool
        cd dotnettool
        results=$(curl --silent --show-error --fail --retry 5 --retry-connrefused "${search}?packageType=dotnettool&prerelease=true&semVerLevel=2.0.0&take=100")
        echo "$results" | jq . > top-100.json
        cat top-100.json | jq '.data[] | .id' -r > top-100-id.txt
        cat top-100.json | jq '[.data[] | .id]' > top-100-id.json
        cat top-100.json | jq '[.data[] | {id: .id, version: .version}]' > top-100-id-version.json
        cat top-100.json | jq '[.data[] | {id: .id, version: .version, totalDownloads: .totalDownloads}]' > top-100-id-version-totalDownloads.json

        cd ..
        mkdir -p template
        cd template
        results=$(curl --silent --show-error --fail --retry 5 --retry-connrefused "${search}?packageType=template&prerelease=true&semVerLevel=2.0.0&take=100")
        echo "$results" | jq . > top-100.json
        cat top-100.json | jq '.data[] | .id' -r > top-100-id.txt
        cat top-100.json | jq '[.data[] | .id]' > top-100-id.json
        cat top-100.json | jq '[.data[] | {id: .id, version: .version}]' > top-100-id-version.json
        cat top-100.json | jq '[.data[] | {id: .id, version: .version, totalDownloads: .totalDownloads}]' > top-100-id-version-totalDownloads.json
    - name: Commit and push data if changed
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git checkout -b test
        git add -A
        timestamp=$(date --iso-8601=seconds)
        git commit -m "Latest data: ${timestamp}" || exit 0
        git push origin test --force
  
